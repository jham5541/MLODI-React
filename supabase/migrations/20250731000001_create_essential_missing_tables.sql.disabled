-- Create only the essential missing tables that are needed for app functionality

-- Create engagements table
CREATE TABLE IF NOT EXISTS public.engagements (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL,
    artist_id UUID NOT NULL,
    engagement_type TEXT NOT NULL,
    points INTEGER DEFAULT 0,
    description TEXT,
    song_id UUID,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create fan_scores table
CREATE TABLE IF NOT EXISTS public.fan_scores (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL,
    artist_id UUID NOT NULL,
    total_score INTEGER DEFAULT 0,
    streaming_points INTEGER DEFAULT 0,
    purchase_points INTEGER DEFAULT 0,
    social_points INTEGER DEFAULT 0,
    video_points INTEGER DEFAULT 0,
    event_points INTEGER DEFAULT 0,
    consecutive_days INTEGER DEFAULT 0,
    fan_since TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, artist_id)
);

-- Create simple users table for compatibility 
CREATE TABLE IF NOT EXISTS public.users (
    id UUID PRIMARY KEY,
    username TEXT UNIQUE,
    email TEXT UNIQUE,
    profile_picture TEXT,
    first_name TEXT,
    last_name TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create essential indexes
CREATE INDEX IF NOT EXISTS idx_engagements_user_id ON public.engagements(user_id);
CREATE INDEX IF NOT EXISTS idx_engagements_artist_id ON public.engagements(artist_id);
CREATE INDEX IF NOT EXISTS idx_engagements_type ON public.engagements(engagement_type);
CREATE INDEX IF NOT EXISTS idx_fan_scores_user_id ON public.fan_scores(user_id);
CREATE INDEX IF NOT EXISTS idx_fan_scores_artist_id ON public.fan_scores(artist_id);
CREATE INDEX IF NOT EXISTS idx_fan_scores_score ON public.fan_scores(total_score DESC);
CREATE INDEX IF NOT EXISTS idx_users_username ON public.users(username);
CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);

-- Simple RLS policies that don't break
ALTER TABLE public.engagements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.fan_scores ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Allow read access to all authenticated users
CREATE POLICY "Allow read access" ON public.engagements FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow read access" ON public.fan_scores FOR SELECT TO authenticated USING (true);  
CREATE POLICY "Allow read access" ON public.users FOR SELECT TO authenticated USING (true);
