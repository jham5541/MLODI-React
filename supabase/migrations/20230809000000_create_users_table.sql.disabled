-- Create users table
create table if not exists public.users (
    id uuid references auth.users on delete cascade primary key,
    username text unique,
    display_name text,
    bio text,
    avatar_url text,
    cover_url text,
    location text,
    website_url text,
    social_links jsonb default '{}'::jsonb,
    preferences jsonb default '{}'::jsonb,
    subscription_tier text default 'free',
    subscription_expires_at timestamptz,
    total_listening_time_ms bigint default 0,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- Set up Row Level Security (RLS)
alter table public.users enable row level security;

-- Create policies
create policy "Users can view their own profile"
    on public.users for select
    using (auth.uid() = id);

create policy "Users can update their own profile"
    on public.users for update
    using (auth.uid() = id);

create policy "Users can insert their own profile"
    on public.users for insert
    with check (auth.uid() = id);

-- Create function to handle user creation
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
    insert into public.users (id, created_at, updated_at)
    values (new.id, now(), now());
    return new;
end;
$$;

-- Create trigger for new user creation
create trigger on_auth_user_created
    after insert on auth.users
    for each row execute procedure public.handle_new_user();
