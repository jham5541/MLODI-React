-- Fix ambiguous column references in ML functions
-- This addresses the "column reference "artist_id" is ambiguous" error

-- Drop and recreate the functions with proper table aliases
DROP FUNCTION IF EXISTS get_emerging_artists(integer);
DROP FUNCTION IF EXISTS get_top_performing_artists(real, integer);

-- 3. Function to get emerging artists (fixed)
CREATE OR REPLACE FUNCTION get_emerging_artists(limit_count INTEGER)
RETURNS TABLE (
    artist_id UUID, 
    name TEXT, 
    avatar_url TEXT, 
    growth_rate REAL, 
    engagement_score REAL, 
    viral_potential REAL,
    weekly_growth INTEGER,
    playlist_adds INTEGER,
    share_rate REAL,
    completion_rate REAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        a.id,
        a.name,
        a.avatar_url,
        calculate_growth_rate(a.id),
        calculate_engagement_score(a.id),
        (calculate_growth_rate(a.id) * 0.6 + calculate_engagement_score(a.id) * 0.4),
        COALESCE(a.monthly_listeners, 0)::INTEGER,
        COALESCE((SELECT COUNT(*) FROM playlist_songs ps JOIN songs s ON ps.song_id = s.id WHERE s.artist_id = a.id), 0)::INTEGER,
        calculate_engagement_score(a.id),
        0.85::REAL
    FROM artists a
    WHERE a.created_at >= NOW() - INTERVAL '2 years'
    AND (a.monthly_listeners > 0 OR (SELECT COUNT(*) FROM songs s WHERE s.artist_id = a.id) > 0)
    ORDER BY (calculate_growth_rate(a.id) * 0.6 + calculate_engagement_score(a.id) * 0.4) DESC
    LIMIT limit_count;
END;
$$ LANGUAGE plpgsql;

-- 4. Function to get top performing artists (fixed)
CREATE OR REPLACE FUNCTION get_top_performing_artists(top_percentage REAL, limit_count INTEGER)
RETURNS TABLE (
    artist_id UUID, 
    name TEXT, 
    avatar_url TEXT, 
    growth_rate REAL, 
    engagement_score REAL, 
    viral_potential REAL,
    weekly_growth INTEGER,
    playlist_adds INTEGER,
    share_rate REAL,
    completion_rate REAL
) AS $$
BEGIN
    RETURN QUERY
    WITH artist_scores AS (
        SELECT 
            a.id,
            a.name,
            a.avatar_url,
            calculate_growth_rate(a.id) as growth_score,
            calculate_engagement_score(a.id) as engagement_score_val,
            (calculate_growth_rate(a.id) * 0.4 + calculate_engagement_score(a.id) * 0.6) as performance_score
        FROM artists a
        WHERE (a.monthly_listeners > 0 OR (SELECT COUNT(*) FROM songs s WHERE s.artist_id = a.id) > 0)
    ),
    ranked_artists AS (
        SELECT 
            *,
            NTILE(100) OVER (ORDER BY performance_score DESC) as percentile
        FROM artist_scores
    )
    SELECT 
        ra.id,
        ra.name,
        ra.avatar_url,
        ra.growth_score,
        ra.engagement_score_val,
        ra.performance_score,
        COALESCE((SELECT a2.monthly_listeners FROM artists a2 WHERE a2.id = ra.id), 0)::INTEGER,
        COALESCE((SELECT COUNT(*) FROM playlist_songs ps JOIN songs s ON ps.song_id = s.id WHERE s.artist_id = ra.id), 0)::INTEGER,
        ra.engagement_score_val,
        0.85::REAL
    FROM ranked_artists ra
    WHERE ra.percentile <= (top_percentage * 100)::INTEGER
    ORDER BY ra.performance_score DESC
    LIMIT limit_count;
END;
$$ LANGUAGE plpgsql;
