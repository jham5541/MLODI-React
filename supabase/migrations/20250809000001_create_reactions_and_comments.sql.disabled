-- Create reaction types enum
CREATE TYPE reaction_type AS ENUM ('like', 'love', 'laugh', 'wow', 'sad', 'angry');

-- Create reactions table
CREATE TABLE track_reactions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    track_id UUID REFERENCES songs(id) ON DELETE CASCADE,
    reaction_type reaction_type NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id, track_id, reaction_type)
);

-- Create comments table
CREATE TABLE track_comments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    track_id UUID REFERENCES songs(id) ON DELETE CASCADE,
    comment TEXT NOT NULL,
    parent_id UUID REFERENCES track_comments(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add foreign key relationship between track_comments and users
ALTER TABLE track_comments
ADD CONSTRAINT fk_track_comments_users
FOREIGN KEY (user_id)
REFERENCES auth.users(id)
ON DELETE CASCADE;

-- Function to get reaction counts for a track
CREATE OR REPLACE FUNCTION get_track_reaction_counts(track_id UUID)
RETURNS TABLE (
    reaction reaction_type,
    count BIGINT
)
LANGUAGE sql
STABLE
AS $$
    SELECT 
        reaction_type as reaction,
        COUNT(*) as count
    FROM track_reactions
    WHERE track_id = $1
    GROUP BY reaction_type;
$$;

-- Function to get reactions for a track
CREATE OR REPLACE FUNCTION get_track_reactions(track_id UUID, limit_val INTEGER DEFAULT 50, offset_val INTEGER DEFAULT 0)
RETURNS TABLE (
    id UUID,
    user_id UUID,
    track_id UUID,
    reaction_type reaction_type,
    created_at TIMESTAMP WITH TIME ZONE,
    username TEXT,
    avatar_url TEXT
)
LANGUAGE sql
STABLE
AS $$
    SELECT 
        r.id,
        r.user_id,
        r.track_id,
        r.reaction_type,
        r.created_at,
        p.username,
        p.avatar_url
    FROM track_reactions r
    LEFT JOIN user_profiles p ON r.user_id = p.id
    WHERE r.track_id = $1
    ORDER BY r.created_at DESC
    LIMIT limit_val
    OFFSET offset_val;
$$;

-- Function to get comments for a track
CREATE OR REPLACE FUNCTION get_track_comments(track_id UUID, limit_val INTEGER DEFAULT 50, offset_val INTEGER DEFAULT 0)
RETURNS TABLE (
    id UUID,
    user_id UUID,
    track_id UUID,
    comment TEXT,
    parent_id UUID,
    created_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE,
    username TEXT,
    avatar_url TEXT
)
LANGUAGE sql
STABLE
AS $$
    SELECT 
        c.id,
        c.user_id,
        c.track_id,
        c.comment,
        c.parent_id,
        c.created_at,
        c.updated_at,
        p.username,
        p.avatar_url
    FROM track_comments c
    LEFT JOIN user_profiles p ON c.user_id = p.id
    WHERE c.track_id = $1
    ORDER BY c.created_at DESC
    LIMIT limit_val
    OFFSET offset_val;
$$;

-- Add RLS policies
ALTER TABLE track_reactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE track_comments ENABLE ROW LEVEL SECURITY;

-- Track reactions policies
CREATE POLICY "Enable read access for all authenticated users" ON track_reactions
    FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Enable insert for authenticated users" ON track_reactions
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable delete for users own reactions" ON track_reactions
    FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Track comments policies
CREATE POLICY "Enable read access for all authenticated users" ON track_comments
    FOR SELECT
    TO authenticated
    USING (true);

CREATE POLICY "Enable insert for authenticated users" ON track_comments
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable update for users own comments" ON track_comments
    FOR UPDATE
    TO authenticated
    USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Enable delete for users own comments" ON track_comments
    FOR DELETE
    TO authenticated
    USING (auth.uid() = user_id);

-- Create indexes for performance
CREATE INDEX idx_track_reactions_track_id ON track_reactions(track_id);
CREATE INDEX idx_track_reactions_user_id ON track_reactions(user_id);
CREATE INDEX idx_track_reactions_type ON track_reactions(reaction_type);
CREATE INDEX idx_track_comments_track_id ON track_comments(track_id);
CREATE INDEX idx_track_comments_user_id ON track_comments(user_id);
CREATE INDEX idx_track_comments_parent_id ON track_comments(parent_id);

-- Update trigger for comments
CREATE TRIGGER update_track_comments_updated_at
    BEFORE UPDATE ON track_comments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
