-- Drop existing function
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

-- Create the update function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for a specific list of tables
DO $$
DECLARE
    table_list text[] := ARRAY[
        'songs',
        'albums',
        'artists',
        'playlists',
        'user_profiles',
        'user_metadata',
        'user_follows',
        'user_subscriptions',
        'fan_scores',
        'play_history',
        'products',
        'product_categories',
        'carts',
        'cart_items',
        'orders',
        'merchandise',
        'merchandise_variants',
        'track_reactions',
        'track_comments'
    ];
    t text;
BEGIN
    FOREACH t IN ARRAY table_list
    LOOP
        -- Only create trigger if table exists and is not a view
        IF EXISTS (
            SELECT 1 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = t 
            AND table_type = 'BASE TABLE'
        ) THEN
            EXECUTE format(
                'DROP TRIGGER IF EXISTS update_%I_updated_at ON %I;
                CREATE TRIGGER update_%I_updated_at 
                BEFORE UPDATE ON %I 
                FOR EACH ROW 
                EXECUTE FUNCTION update_updated_at_column()',
                t, t, t, t
            );
        END IF;
    END LOOP;
END
$$;
