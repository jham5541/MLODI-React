-- Drop all potentially conflicting triggers
DO $$ 
DECLARE
    _tbl text;
    _trigger text;
BEGIN
    FOR _tbl IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public')
    LOOP
        FOR _trigger IN (
            SELECT tgname 
            FROM pg_trigger 
            WHERE tgrelid = (_tbl::regclass)::oid 
            AND tgname LIKE 'update_%_updated_at'
        )
        LOOP
            EXECUTE format('DROP TRIGGER IF EXISTS %I ON %I', _trigger, _tbl);
        END LOOP;
    END LOOP;
END $$;

-- Drop old update functions if they exist
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

-- Create the updated_at column update function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create updated_at triggers for each table
DO $$ 
BEGIN
    -- Only create triggers for tables that definitely exist and have an updated_at column
    
    -- Songs table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'songs' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_songs_updated_at
            BEFORE UPDATE ON songs
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- User likes table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'user_likes' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_user_likes_updated_at
            BEFORE UPDATE ON user_likes
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- Play history table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'play_history' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_play_history_updated_at
            BEFORE UPDATE ON play_history
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- Engagements table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'engagements' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_engagements_updated_at
            BEFORE UPDATE ON engagements
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- Products table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'products' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_products_updated_at
            BEFORE UPDATE ON products
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- Carts table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'carts' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_carts_updated_at
            BEFORE UPDATE ON carts
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- Cart items table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'cart_items' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_cart_items_updated_at
            BEFORE UPDATE ON cart_items
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    -- Orders table
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'orders' 
        AND column_name = 'updated_at'
    ) THEN
        CREATE TRIGGER update_orders_updated_at
            BEFORE UPDATE ON orders
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error creating triggers: %', SQLERRM;
END $$;
