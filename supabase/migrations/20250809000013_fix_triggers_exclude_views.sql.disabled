-- Drop existing function
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

-- Create the update function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for all tables (not views) with updated_at column
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN 
        SELECT DISTINCT t.table_name 
        FROM information_schema.columns c
        JOIN information_schema.tables t 
          ON c.table_name = t.table_name 
          AND c.table_schema = t.table_schema
        WHERE c.table_schema = 'public' 
        AND c.column_name = 'updated_at'
        AND t.table_type = 'BASE TABLE'  -- Only include actual tables, not views
    LOOP
        EXECUTE format(
            'DROP TRIGGER IF EXISTS update_%I_updated_at ON %I;
             CREATE TRIGGER update_%I_updated_at 
             BEFORE UPDATE ON %I 
             FOR EACH ROW 
             EXECUTE FUNCTION update_updated_at_column()',
            r.table_name, r.table_name, r.table_name, r.table_name
        );
    END LOOP;
END
$$;
