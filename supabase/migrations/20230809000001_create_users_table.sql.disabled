-- Create public schema if it doesn't exist
create schema if not exists public;

-- Grant necessary permissions
grant usage on schema public to postgres, anon, authenticated, service_role;
grant all privileges on all tables in schema public to postgres, anon, authenticated, service_role;
grant all privileges on all functions in schema public to postgres, anon, authenticated, service_role;
grant all privileges on all sequences in schema public to postgres, anon, authenticated, service_role;

-- Create users table
create table if not exists public.users (
    id uuid not null primary key,
    username text unique,
    display_name text,
    bio text,
    avatar_url text,
    cover_url text,
    location text,
    website_url text,
    social_links jsonb default '{}'::jsonb,
    preferences jsonb default '{}'::jsonb,
    subscription_tier text default 'free',
    subscription_expires_at timestamptz,
    total_listening_time_ms bigint default 0,
    created_at timestamptz default now(),
    updated_at timestamptz default now(),
    constraint fk_user
        foreign key (id)
        references auth.users (id)
        on delete cascade
);

-- Enable RLS
alter table public.users enable row level security;

-- Create policies
create policy "Public profiles are viewable by everyone"
    on users for select
    using (true);

create policy "Users can insert their own profile"
    on users for insert
    with check (auth.uid() = id);

create policy "Users can update own profile"
    on users for update
    using (auth.uid() = id);

-- Function to automatically create user profile
create or replace function public.handle_new_user()
returns trigger as $$
begin
    insert into public.users (id)
    values (new.id)
    on conflict (id) do nothing;
    return new;
end;
$$ language plpgsql security definer;

-- Drop existing trigger if it exists
drop trigger if exists on_auth_user_created on auth.users;

-- Create trigger
create trigger on_auth_user_created
    after insert on auth.users
    for each row execute procedure public.handle_new_user();

-- Grant permissions to handle_new_user function
grant execute on function public.handle_new_user() to anon, authenticated, service_role;
