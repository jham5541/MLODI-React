-- Create users_metadata table for additional user fields
CREATE TABLE IF NOT EXISTS public.users_metadata (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    address TEXT,
    display_name TEXT,
    bio TEXT,
    avatar_url TEXT,
    cover_url TEXT,
    location TEXT,
    website_url TEXT,
    social_links JSONB DEFAULT '{}',
    preferences JSONB DEFAULT '{}',
    subscription_tier TEXT DEFAULT 'free',
    total_listening_time_ms BIGINT DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add trigger for automatically updating updated_at
CREATE OR REPLACE FUNCTION update_users_metadata_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_users_metadata_updated_at ON public.users_metadata;
CREATE TRIGGER update_users_metadata_updated_at
    BEFORE UPDATE ON public.users_metadata
    FOR EACH ROW
    EXECUTE FUNCTION update_users_metadata_updated_at_column();

-- Add RLS policies
ALTER TABLE public.users_metadata ENABLE ROW LEVEL SECURITY;

-- Allow users to read their own metadata
CREATE POLICY "Users can read their own metadata"
    ON public.users_metadata FOR SELECT
    USING (auth.uid() = id);

-- Allow users to update their own metadata
CREATE POLICY "Users can update their own metadata"
    ON public.users_metadata FOR UPDATE
    USING (auth.uid() = id)
    WITH CHECK (auth.uid() = id);

-- Allow users to insert their own metadata
CREATE POLICY "Users can insert their own metadata"
    ON public.users_metadata FOR INSERT
    WITH CHECK (auth.uid() = id);

-- Create a trigger to automatically create metadata when a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.users_metadata (id)
    VALUES (NEW.id);
    RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION public.handle_new_user();
