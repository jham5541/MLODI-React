-- Create the tour_dates table
create table if not exists public.tour_dates (
  id uuid default gen_random_uuid() primary key,
  artist_id uuid references auth.users(id) not null,
  venue text not null,
  city text not null,
  date date not null,
  time time not null,
  price numeric(10,2) not null,
  total_tickets integer not null,
  available_tickets integer not null,
  description text,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Create the ticket_purchases table
create table if not exists public.ticket_purchases (
  id uuid default gen_random_uuid() primary key,
  tour_date_id uuid references public.tour_dates(id) not null,
  user_id uuid references auth.users(id) not null,
  quantity integer not null check (quantity > 0),
  price_per_ticket numeric(10,2) not null,
  total_price numeric(10,2) not null,
  status text not null check (status in ('pending', 'completed', 'cancelled')),
  confirmation_code text unique not null,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Create the tickets table for individual tickets
create table if not exists public.tickets (
  id uuid default gen_random_uuid() primary key,
  purchase_id uuid references public.ticket_purchases(id) not null,
  tour_date_id uuid references public.tour_dates(id) not null,
  user_id uuid references auth.users(id) not null,
  qr_code text unique not null,
  status text not null check (status in ('valid', 'used', 'cancelled')),
  used_at timestamp with time zone,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Create RLS policies
alter table public.tour_dates enable row level security;
alter table public.ticket_purchases enable row level security;
alter table public.tickets enable row level security;

-- Policies for tour_dates
create policy "Tour dates are viewable by everyone"
  on public.tour_dates for select
  using (true);

create policy "Artists can create their own tour dates"
  on public.tour_dates for insert
  with check (artist_id = auth.uid());

create policy "Artists can update their own tour dates"
  on public.tour_dates for update
  using (artist_id = auth.uid());

-- Policies for ticket_purchases
create policy "Users can view their own ticket purchases"
  on public.ticket_purchases for select
  using (user_id = auth.uid());

create policy "Users can create ticket purchases"
  on public.ticket_purchases for insert
  with check (user_id = auth.uid());

create policy "Users can update their own ticket purchases"
  on public.ticket_purchases for update
  using (user_id = auth.uid());

-- Policies for tickets
create policy "Users can view their own tickets"
  on public.tickets for select
  using (user_id = auth.uid());

create policy "System can create tickets for users"
  on public.tickets for insert
  with check (user_id = auth.uid());

-- Functions
create or replace function get_artist_tour_dates(artist_id_param uuid)
returns table (
  id uuid,
  venue text,
  city text,
  date date,
  time time,
  price numeric,
  available_tickets integer,
  total_tickets integer,
  description text
)
language plpgsql
security definer
set search_path = public
as $$
begin
  return query
  select
    td.id,
    td.venue,
    td.city,
    td.date,
    td.time,
    td.price,
    td.available_tickets,
    td.total_tickets,
    td.description
  from tour_dates td
  where td.artist_id = artist_id_param
  and td.date >= current_date
  order by td.date asc, td.time asc;
end;
$$;

-- Trigger to update available_tickets
create or replace function update_available_tickets()
returns trigger as $$
begin
  if (TG_OP = 'INSERT') then
    update tour_dates
    set available_tickets = available_tickets - NEW.quantity
    where id = NEW.tour_date_id;
  elsif (TG_OP = 'UPDATE' and OLD.status != 'cancelled' and NEW.status = 'cancelled') then
    update tour_dates
    set available_tickets = available_tickets + OLD.quantity
    where id = NEW.tour_date_id;
  end if;
  return NEW;
end;
$$ language plpgsql;

create trigger ticket_purchase_trigger
after insert or update on ticket_purchases
for each row
execute function update_available_tickets();

-- Function to purchase tickets
create or replace function purchase_tickets(
  p_tour_date_id uuid,
  p_quantity integer
)
returns table (
  purchase_id uuid,
  confirmation_code text,
  tickets jsonb
)
language plpgsql
security definer
set search_path = public
as $$
declare
  v_user_id uuid;
  v_price numeric;
  v_purchase_id uuid;
  v_confirmation_code text;
  v_available_tickets integer;
  v_tickets jsonb := '[]'::jsonb;
begin
  -- Get current user ID
  v_user_id := auth.uid();
  if v_user_id is null then
    raise exception 'Not authenticated';
  end if;

  -- Check tour date exists and has enough tickets
  select price, available_tickets
  into v_price, v_available_tickets
  from tour_dates
  where id = p_tour_date_id;

  if v_price is null then
    raise exception 'Tour date not found';
  end if;

  if v_available_tickets < p_quantity then
    raise exception 'Not enough tickets available';
  end if;

  -- Generate confirmation code
  v_confirmation_code := upper(substring(md5(random()::text) from 1 for 8));

  -- Create purchase record
  insert into ticket_purchases (
    tour_date_id,
    user_id,
    quantity,
    price_per_ticket,
    total_price,
    status,
    confirmation_code
  )
  values (
    p_tour_date_id,
    v_user_id,
    p_quantity,
    v_price,
    v_price * p_quantity,
    'completed',
    v_confirmation_code
  )
  returning id into v_purchase_id;

  -- Create individual tickets
  for i in 1..p_quantity loop
    insert into tickets (
      purchase_id,
      tour_date_id,
      user_id,
      qr_code,
      status
    )
    values (
      v_purchase_id,
      p_tour_date_id,
      v_user_id,
      upper(substring(md5(random()::text) from 1 for 16)),
      'valid'
    );
    
    select jsonb_agg(t.*)
    into v_tickets
    from tickets t
    where t.purchase_id = v_purchase_id;
  end loop;

  return query
  select 
    v_purchase_id,
    v_confirmation_code,
    v_tickets;
end;
$$;
